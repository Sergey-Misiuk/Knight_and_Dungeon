import random
from dungeon.utils.room_text.room_events import ROOM_EVENTS
from buffs.models import BuffDebuff


ATTRIBUTE_MAPPING = {
    "health": "max_hp",
    "attack": "base_attack",
    "defense": "armor",
}


def process_room_event(character, event_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–∏—Å—Ç–µ–º–Ω—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç)"""

    if event_type == "Trap":
        text = random.choice(ROOM_EVENTS["Trap"])
        damage = random.randint(5, 15)
        character.hp = max(0, character.hp - damage)
        character.save()
        return text, f"ü©∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {damage} HP –∏–∑-–∑–∞ –ª–æ–≤—É—à–∫–∏!"

    elif event_type == "Buff":
        attribute = random.choice(["Health", "Attack", "Defense"])
        buff_name = f"{attribute} Boost"
        buff = BuffDebuff.objects.get(name=buff_name)
        text = random.choice(ROOM_EVENTS["Buff"][attribute])
        calculation_buff_or_debuff("Buff", character, buff)

        return (
            text,
            f"üõ°Ô∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞—Ñ—Ñ: {buff.get_attribute_display()} +{int((buff.value - 1) * 100)}% –Ω–∞ {buff.duration} —Ö–æ–¥–æ–≤.",
        )

    elif event_type == "Debuff":
        attribute = random.choice(["Health", "Attack", "Defense"])
        debuff_name = f"{attribute} Curse"
        debuff = BuffDebuff.objects.get(name=debuff_name)
        text = random.choice(ROOM_EVENTS["Debuff"][attribute])
        calculation_buff_or_debuff("Debuff", character, debuff)

        return (
            text,
            f"‚ò†Ô∏è –í–∞—Å –ø–æ—Ä–∞–∑–∏–ª –¥–µ–±–∞—Ñ—Ñ: {debuff.get_attribute_display()} ‚Äì{int((1 - debuff.value) * 100)}% –Ω–∞ {debuff.duration} —Ö–æ–¥–æ–≤.",
        )


def calculation_buff_or_debuff(event_type: str, character, buff_obj):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∞—Ñ—Ñ–æ–≤ –∏ –¥–µ–±–∞—Ñ—Ñ–æ–≤.

    :param event_type: "Buff" –∏–ª–∏ "Debuff"
    :param character: –æ–±—ä–µ–∫—Ç Character
    :param buff_obj: –æ–±—ä–µ–∫—Ç BuffDebuff
    """
    attribute_key = buff_obj.attribute
    model_field = ATTRIBUTE_MAPPING.get(attribute_key)

    if model_field is None:
        raise ValueError(f"–ù–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ '{attribute_key}'")

    current_value = getattr(character, model_field, None)
    if current_value is None:
        raise ValueError(f"Character –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ '{model_field}'")

    if event_type == "Buff":
        new_value = int(current_value * buff_obj.value)
    elif event_type == "Debuff":
        new_value = int(current_value * buff_obj.value)
    else:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")

    setattr(character, model_field, new_value)
    character.save()

    return f"{model_field.capitalize()} –∏–∑–º–µ–Ω–µ–Ω–æ —Å {current_value} –¥–æ {new_value}"
