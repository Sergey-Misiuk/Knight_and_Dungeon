
from battle.utils.battle_logic import BattleManager
from enemies.models import EnemyStats
from dungeon.utils.room_logic import process_room_event
from heroes.models import Character
import random


class RoomEventType:
    CHEST = "–°—É–Ω–¥—É–∫"
    BATTLE = "–ë–∏—Ç–≤–∞"
    BUFF = "–ë–∞—Ñ—Ñ"
    DEBUFF = "–î–µ–±–∞—Ñ"
    TRAP = "–õ–æ–≤—É—à–∫–∞"
    EMPTY = "–ü—É—Å—Ç–æ"


class RoomEventGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.
    """

    EVENT_WEIGHTS = {
        RoomEventType.BATTLE: 40,
        RoomEventType.CHEST: 25,
        RoomEventType.BUFF: 10,
        RoomEventType.DEBUFF: 10,
        RoomEventType.TRAP: 5,
        RoomEventType.EMPTY: 10,
    }

    def __init__(self, character: Character):
        self.character = character
        self.difficulty = character.difficulty

    def choose_event_type(self) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤.
        """
        events = list(self.EVENT_WEIGHTS.keys())
        weights = list(self.EVENT_WEIGHTS.values())
        return random.choices(events, weights=weights, k=1)[0]

    def generate_event(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.
        """
        event_type = self.choose_event_type()

        if event_type == RoomEventType.BATTLE:
            return self.handle_battle()
        elif event_type == RoomEventType.CHEST:
            return self.handle_chest()
        elif event_type == RoomEventType.BUFF:
            return self.handle_buff()
        elif event_type == RoomEventType.DEBUFF:
            return self.handle_debuff()
        elif event_type == RoomEventType.TRAP:
            return self.handle_trap()
        elif event_type == RoomEventType.EMPTY:
            return self.handle_empty()
        return "üö™ –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞."

    def handle_battle(self):

        enemy_stats = EnemyStats.objects.filter(difficulty=self.difficulty).order_by("?").first()

        if not enemy_stats:
            return {"event_text": "‚öîÔ∏è –í—Ä–∞–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", "system_text": None}

        battle = BattleManager(self.character, enemy_stats)

        result_texts = []

        result_texts.append(battle.character_attack())

        if not battle.is_enemy_dead():
            result_texts.append(battle.enemy_attack())

        battle.save_character_state()

        if battle.is_enemy_dead():
            result_texts.append("üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤—Ä–∞–≥–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É!")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!
        elif battle.is_character_dead():
            result_texts.append("‚ò†Ô∏è –í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –±–æ—é...")

        return {
            "event_text": "‚öîÔ∏è –ù–∞—á–∞–ª—Å—è –±–æ–π!",
            "system_text": "\n".join(result_texts),
        }

        # return {
        #     "event_text": "‚öîÔ∏è –í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –≤—Ä–∞–≥, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–∏—Ç–≤–µ!",
        #     "system_text": None,
        # }

    def handle_chest(self):
        return {
            "event_text": "ü™ô –í—ã –Ω–∞—à–ª–∏ —Å—É–Ω–¥—É–∫!",
            "system_text": None,
        }

    def handle_buff(self):
        text, system_text = process_room_event(self.character, "Buff")
        return {
            "event_text": text,
            "system_text": system_text,
        }

    def handle_debuff(self):
        text, system_text = process_room_event(self.character, "Debuff")
        return {
            "event_text": text,
            "system_text": system_text,
        }

    def handle_trap(self):
        text, system_text = process_room_event(self.character, "Trap")
        return {
            "event_text": text,
            "system_text": system_text,
        }

    def handle_empty(self):
        return {
            "event_text": "üßπ –ü—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞. –ü–æ—Ä–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å...",
            "system_text": None,
        }
